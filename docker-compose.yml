version: "3"

services:
  job-runner:
    container_name: job-runner
    image: renegmedal/job-runner
    build:
      context: ./job-runner
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - 4001:4001
    networks:
      - microservices
    environment:
      - GIN_MODE=release
    volumes:
      - ./job-runner/docker.yml:/config.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  job-worker:
    container_name: job-worker
    image: renegmedal/job-worker
    build:
      context: ./job-worker
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq
      - postgres
      - job-runner
    networks:
      - microservices
    volumes:
      - ./job-worker/docker.yml:/config.yml

  postgres:
    container_name: postgresql
    image: postgres:15
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: db
    networks:
      - microservices
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # flyway:
  #   image: flyway/flyway
  #   restart: on-failure
  #   depends_on:
  #     - postgres
  #   volumes:
  #     - ./go-job-runner/sql:/flyway/sql
  #   environment:
  #     - FLYWAY_URL=jdbc:postgresql://postgres:5432/db
  #     - FLYWAY_USER=username
  #     - FLYWAY_PASSWORD=password
  #     - FLYWAY_SCHEMAS=public
  #     - FLYWAY_LOCATIONS=filesystem:/flyway/sql
  #   command: info repair migrate validate

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.8-management
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: username
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmqctl:
    container_name: rabbitmqctl
    image: rabbitmq:3.8-management
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_USER: username
      RABBITMQ_PASS: password
      RABBITMQ_HOST: rabbitmq
    networks:
      - microservices
    command: |
      /bin/bash -c
        "
        rabbitmqadmin declare exchange name=jobs type=direct --host=rabbitmq --username=username --password=password &&
        rabbitmqadmin declare exchange name=job-events type=direct --host=rabbitmq --username=username --password=password &&

        rabbitmqadmin declare queue name=job-events --host=rabbitmq --username=username --password=password &&
        rabbitmqadmin declare queue name=random-worker --host=rabbitmq --username=username --password=password &&

        rabbitmqadmin declare binding source=job-events destination=job-events routing_key=event --host=rabbitmq --username=username --password=password &&
        rabbitmqadmin declare binding source=jobs destination=random-worker routing_key=worker.random --host=rabbitmq --username=username --password=password
        "

  # adminer:
  #   image: adminer
  #   restart: always
  #   depends_on:
  #     - postgres
  #   ports:
  #     - 8080:8080

networks:
  microservices: 

volumes:
  db-data:
  rabbitmq-data: